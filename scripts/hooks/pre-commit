#!/bin/bash

# Pre-commit hook for protocol breaking change detection
# Blocks commits with breaking changes unless migration file is present

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Checking for protocol breaking changes...${NC}"

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${YELLOW}‚ö†Ô∏è  Not in a git repository, skipping protocol diff check${NC}"
    exit 0
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Filter for protocol manifest files
PROTOCOL_FILES=$(echo "$STAGED_FILES" | grep -E '\.(json|yaml|yml)$' | grep -E '(manifest|protocol|api|event|data)' || true)

if [ -z "$PROTOCOL_FILES" ]; then
    echo -e "${GREEN}‚úÖ No protocol files staged, skipping diff check${NC}"
    exit 0
fi

echo -e "${BLUE}üìã Found protocol files:${NC}"
echo "$PROTOCOL_FILES" | sed 's/^/  /'

# Check if OSSP CLI is available
if ! command -v ossp >/dev/null 2>&1; then
    echo -e "${YELLOW}‚ö†Ô∏è  OSSP CLI not found, skipping protocol diff check${NC}"
    echo -e "${YELLOW}   Install with: npm install -g ossp${NC}"
    exit 0
fi

# Track breaking changes
BREAKING_CHANGES_FOUND=false
MIGRATION_FILES=()

# Check each protocol file for breaking changes
for file in $PROTOCOL_FILES; do
    echo -e "${BLUE}üîç Checking $file for breaking changes...${NC}"
    
    # Get the previous version from git
    if git show HEAD:"$file" >/dev/null 2>&1; then
        # File exists in HEAD, compare with staged version
        OLD_FILE=$(mktemp)
        NEW_FILE=$(mktemp)
        
        git show HEAD:"$file" > "$OLD_FILE"
        git show :"$file" > "$NEW_FILE"
        
        # Run protocol diff
        if ossp protocol:diff --old "$OLD_FILE" --new "$NEW_FILE" --format json >/dev/null 2>&1; then
            # No breaking changes
            echo -e "${GREEN}  ‚úÖ No breaking changes detected${NC}"
        else
            # Breaking changes detected
            BREAKING_CHANGES_FOUND=true
            echo -e "${RED}  ‚ùå Breaking changes detected${NC}"
            
            # Check for migration file
            MIGRATION_FILE=""
            for migration_pattern in "MIGRATION.md" "BREAKING_CHANGES.md" "CHANGELOG.md"; do
                if [ -f "$migration_pattern" ]; then
                    MIGRATION_FILE="$migration_pattern"
                    break
                fi
            done
            
            if [ -n "$MIGRATION_FILE" ]; then
                echo -e "${GREEN}  ‚úÖ Migration file found: $MIGRATION_FILE${NC}"
                MIGRATION_FILES+=("$MIGRATION_FILE")
            else
                echo -e "${RED}  ‚ùå No migration file found${NC}"
            fi
        fi
        
        # Cleanup temp files
        rm -f "$OLD_FILE" "$NEW_FILE"
    else
        echo -e "${YELLOW}  ‚ö†Ô∏è  New file, skipping diff check${NC}"
    fi
done

# Final check
if [ "$BREAKING_CHANGES_FOUND" = true ]; then
    if [ ${#MIGRATION_FILES[@]} -eq 0 ]; then
        echo -e "${RED}‚ùå Breaking changes detected without migration file!${NC}"
        echo -e "${YELLOW}To proceed:${NC}"
        echo -e "${YELLOW}  1. Create a migration file (MIGRATION.md, BREAKING_CHANGES.md, or CHANGELOG.md)${NC}"
        echo -e "${YELLOW}  2. Document the breaking changes in the migration file${NC}"
        echo -e "${YELLOW}  3. Commit the migration file along with your changes${NC}"
        echo -e "${YELLOW}  4. Or use: git commit --no-verify to bypass this check${NC}"
        exit 1
    else
        echo -e "${GREEN}‚úÖ Breaking changes detected but migration files found:${NC}"
        for migration_file in "${MIGRATION_FILES[@]}"; do
            echo -e "${GREEN}  üìÑ $migration_file${NC}"
        done
        echo -e "${GREEN}‚úÖ Proceeding with commit${NC}"
    fi
else
    echo -e "${GREEN}‚úÖ No breaking changes detected, proceeding with commit${NC}"
fi

exit 0
