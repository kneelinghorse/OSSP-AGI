name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  fast:
    name: Fast Guardrail
    runs-on: ubuntu-latest
    timeout-minutes: 6
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run fast test suite
        run: npm run test:fast

      - name: Run MCP smoke tests
        run: npm run test:e2e:mcp

      - name: Collect performance metrics
        run: |
          mkdir -p .artifacts
          node cli/index.js perf:status --format json > .artifacts/perf.json

      - name: Enforce performance budgets
        run: node scripts/ci/perf-budget.js

      - name: Upload performance artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: perf-fast
          path: .artifacts/perf.json

  full:
    name: Full Validation
    runs-on: ubuntu-latest
    timeout-minutes: 18
    needs: fast
    strategy:
      fail-fast: false
      matrix:
        node-version: [18, 20]
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: npm run test:ci

      - name: Run performance benchmarks
        run: npm run test:performance

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: Collect performance metrics
        run: |
          mkdir -p .artifacts
          node cli/index.js perf:status --format json > .artifacts/perf.json

      - name: Enforce performance budgets
        run: node scripts/ci/perf-budget.js

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.node-version }}
          path: coverage/

      - name: Upload performance artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: perf-full-${{ matrix.node-version }}
          path: .artifacts/perf.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('performance-results.json') != ''
        with:
          name: performance-results-${{ matrix.node-version }}
          path: performance-results.json

  docker_image:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 6
    needs: full

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -f Dockerfile . -t ossp-agi-mcp:latest

      - name: Test Docker image
        run: |
          docker run --rm -d --name ossp-agi-mcp-test \
            -e PROTOCOL_ROOT=/app \
            -e NODE_ENV=production \
            ossp-agi-mcp:latest

      - name: Wait for container startup
        run: sleep 10

      - name: Check container health
        run: |
          docker ps | grep ossp-agi-mcp-test
          docker logs ossp-agi-mcp-test

      - name: Cleanup
        if: always()
        run: |
          docker stop ossp-agi-mcp-test || true
          docker rm ossp-agi-mcp-test || true

      - name: Push to registry (if main branch)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Would push to registry in production"
          # docker tag ossp-agi-mcp:latest ghcr.io/org/oss-protocols:latest
          # docker push ghcr.io/org/oss-protocols:latest

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs:
      - fast
      - full
      - docker_image
    if: always()

    steps:
      - name: Generate CI summary
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Fast Guardrail | ${{ needs.fast.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Full Validation | ${{ needs.full.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build & Test | ${{ needs.docker_image.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Performance Budgets" >> $GITHUB_STEP_SUMMARY
          echo "- Discovery P95 ≤ 1000ms" >> $GITHUB_STEP_SUMMARY
          echo "- MCP P95 ≤ 3000ms" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### CI Pipeline Targets" >> $GITHUB_STEP_SUMMARY
          echo "- Fast guardrail: ≤ 5 minutes" >> $GITHUB_STEP_SUMMARY
          echo "- Full validation: Includes coverage + perf benchmarks" >> $GITHUB_STEP_SUMMARY
