#!/usr/bin/env node

/**
 * CI Performance Budget Guard
 *
 * Reads `.artifacts/perf.json` (or a supplied path) generated by
 * `node cli/index.js perf:status --format json` and enforces simple
 * P95 latency ceilings for discovery and MCP services.
 *
 * Budgets are configurable via CLI flags or environment variables:
 *   PERF_BUDGET_DISCOVERY_P95 (ms)
 *   PERF_BUDGET_MCP_P95 (ms)
 *
 * The script exits with code 1 if the budgets are exceeded or if the
 * metrics payload is missing the required fields.
 */

import fs from 'fs/promises';
import path from 'path';
import process from 'process';
import { fileURLToPath } from 'url';

const DEFAULT_DISCOVERY_P95 = Number.parseInt(
  process.env.PERF_BUDGET_DISCOVERY_P95 ?? '1000',
  10
);
const DEFAULT_MCP_P95 = Number.parseInt(
  process.env.PERF_BUDGET_MCP_P95 ?? '3000',
  10
);

function resolveFromCwd(targetPath) {
  return path.resolve(process.cwd(), targetPath);
}

function parseArgs() {
  const args = process.argv.slice(2);
  const options = {
    file: '.artifacts/perf.json',
    discoveryBudget: DEFAULT_DISCOVERY_P95,
    mcpBudget: DEFAULT_MCP_P95
  };

  for (let i = 0; i < args.length; i += 1) {
    const arg = args[i];

    if ((arg === '--file' || arg === '-f') && args[i + 1]) {
      options.file = args[i + 1];
      i += 1;
    } else if (arg === '--discovery-p95' && args[i + 1]) {
      options.discoveryBudget = Number.parseFloat(args[i + 1]);
      i += 1;
    } else if (arg === '--mcp-p95' && args[i + 1]) {
      options.mcpBudget = Number.parseFloat(args[i + 1]);
      i += 1;
    } else if (arg === '--help' || arg === '-h') {
      printHelp();
      process.exit(0);
    }
  }

  return options;
}

function printHelp() {
  const scriptPath = path.relative(
    process.cwd(),
    fileURLToPath(import.meta.url)
  );
  console.log(`
Usage: node ${scriptPath} [options]

Options:
  --file, -f <path>         Path to perf.json (default: .artifacts/perf.json)
  --discovery-p95 <ms>      Discovery P95 budget in milliseconds
  --mcp-p95 <ms>            MCP P95 budget in milliseconds
  --help, -h                Show this help message

Environment overrides:
  PERF_BUDGET_DISCOVERY_P95   (default: ${DEFAULT_DISCOVERY_P95})
  PERF_BUDGET_MCP_P95         (default: ${DEFAULT_MCP_P95})
`);
}

function validateMetrics(summary) {
  if (!summary || typeof summary !== 'object') {
    throw new Error('Invalid perf summary: expected JSON object.');
  }

  const { discovery, mcp } = summary;

  if (!discovery || typeof discovery.p95 !== 'number') {
    throw new Error('Missing discovery.p95 metric in perf summary.');
  }

  if (!mcp || typeof mcp.p95 !== 'number') {
    throw new Error('Missing mcp.p95 metric in perf summary.');
  }

  return { discoveryP95: discovery.p95, mcpP95: mcp.p95 };
}

async function main() {
  const options = parseArgs();
  const perfFile = resolveFromCwd(options.file);

  let metricsRaw;
  try {
    metricsRaw = await fs.readFile(perfFile, 'utf8');
  } catch (error) {
    throw new Error(
      `Unable to read performance metrics at ${perfFile}: ${error.message}`
    );
  }

  let summary;
  try {
    summary = JSON.parse(metricsRaw);
  } catch (error) {
    throw new Error(
      `Invalid JSON in ${perfFile}: ${error.message}`
    );
  }

  const { discoveryP95, mcpP95 } = validateMetrics(summary);

  const violations = [];

  if (!Number.isFinite(discoveryP95)) {
    violations.push('discovery.p95 is not a finite number.');
  } else if (discoveryP95 > options.discoveryBudget) {
    violations.push(
      `discovery.p95 ${discoveryP95.toFixed(2)}ms exceeds budget ${options.discoveryBudget}ms`
    );
  }

  if (!Number.isFinite(mcpP95)) {
    violations.push('mcp.p95 is not a finite number.');
  } else if (mcpP95 > options.mcpBudget) {
    violations.push(
      `mcp.p95 ${mcpP95.toFixed(2)}ms exceeds budget ${options.mcpBudget}ms`
    );
  }

  if (violations.length > 0) {
    const message = [
      '❌ Performance budgets not met:',
      ...violations.map((item) => `  - ${item}`)
    ].join('\n');
    throw new Error(message);
  }

  console.log(
    [
      '✅ Performance budgets met:',
      `  - discovery.p95 ${discoveryP95.toFixed(2)}ms ≤ ${options.discoveryBudget}ms`,
      `  - mcp.p95 ${mcpP95.toFixed(2)}ms ≤ ${options.mcpBudget}ms`
    ].join('\n')
  );
}

main().catch((error) => {
  console.error(error.message || error);
  process.exit(1);
});

