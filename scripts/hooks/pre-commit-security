#!/bin/bash

# Pre-commit hook for security policy enforcement
# Blocks commits with security violations unless --allow-violations is used

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîí Running security policy checks...${NC}"

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${YELLOW}‚ö†Ô∏è  Not in a git repository, skipping security check${NC}"
    exit 0
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Filter for relevant files
RELEVANT_FILES=$(echo "$STAGED_FILES" | grep -E '\.(js|ts|json|yaml|yml|md|txt)$' || true)

if [ -z "$RELEVANT_FILES" ]; then
    echo -e "${GREEN}‚úÖ No relevant files staged, skipping security check${NC}"
    exit 0
fi

echo -e "${BLUE}üìã Found relevant files:${NC}"
echo "$RELEVANT_FILES" | sed 's/^/  /'

# Check if security scan command is available
if ! command -v node >/dev/null 2>&1; then
    echo -e "${YELLOW}‚ö†Ô∏è  Node.js not found, skipping security check${NC}"
    exit 0
fi

# Check if security-scan.js exists
SECURITY_SCAN_SCRIPT="$(dirname "$0")/../../cli/commands/security-scan.js"
if [ ! -f "$SECURITY_SCAN_SCRIPT" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Security scan script not found, skipping security check${NC}"
    exit 0
fi

# Track security violations
SECURITY_VIOLATIONS_FOUND=false
TOTAL_VIOLATIONS=0
VIOLATION_REPORT=""

# Check each relevant file for security violations
for file in $RELEVANT_FILES; do
    echo -e "${BLUE}üîç Checking $file for security violations...${NC}"
    
    # Get the staged version of the file
    STAGED_FILE=$(mktemp)
    git show :"$file" > "$STAGED_FILE"
    
    # Run security scan on the staged file
    if node "$SECURITY_SCAN_SCRIPT" --target "$STAGED_FILE" --format json >/dev/null 2>&1; then
        # No security violations
        echo -e "${GREEN}  ‚úÖ No security violations detected${NC}"
    else
        # Security violations detected
        SECURITY_VIOLATIONS_FOUND=true
        echo -e "${RED}  ‚ùå Security violations detected${NC}"
        
        # Get detailed violation report (allow violations for JSON output)
        VIOLATION_DETAILS=$(node "$SECURITY_SCAN_SCRIPT" --target "$STAGED_FILE" --format json --allow-violations 2>/dev/null | grep -v '^‚ö†Ô∏è' | grep -v '^‚úÖ' || echo '{"violations":[]}')
        VIOLATION_COUNT=$(echo "$VIOLATION_DETAILS" | jq '.violations | length' 2>/dev/null || echo "0")
        TOTAL_VIOLATIONS=$((TOTAL_VIOLATIONS + VIOLATION_COUNT))
        
        # Add to violation report
        VIOLATION_REPORT+="\n## $file\n"
        VIOLATION_REPORT+="$(echo "$VIOLATION_DETAILS" | jq -r '.violations[] | "- " + .description + " (Line " + (.line | tostring) + ")"' 2>/dev/null || echo "  - Unable to parse violations")\n"
    fi
    
    # Cleanup temp file
    rm -f "$STAGED_FILE"
done

# Final check
if [ "$SECURITY_VIOLATIONS_FOUND" = true ]; then
    echo -e "${RED}‚ùå Security violations detected!${NC}"
    echo -e "${YELLOW}Found $TOTAL_VIOLATIONS violations across staged files:${NC}"
    echo -e "$VIOLATION_REPORT"
    echo -e "${YELLOW}To proceed:${NC}"
    echo -e "${YELLOW}  1. Fix the security violations${NC}"
    echo -e "${YELLOW}  2. Use: git commit --no-verify to bypass this check${NC}"
    echo -e "${YELLOW}  3. Or run: node $SECURITY_SCAN_SCRIPT --target <file> --allow-violations${NC}"
    echo -e "${YELLOW}  4. Update security policies if needed${NC}"
    exit 1
else
    echo -e "${GREEN}‚úÖ No security violations detected, proceeding with commit${NC}"
fi

exit 0
