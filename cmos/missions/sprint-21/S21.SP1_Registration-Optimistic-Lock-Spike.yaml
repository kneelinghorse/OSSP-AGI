missionId: S21.SP1-20251024
status: Planned
objective: >
  Investigate optimistic-locking instability in the registration pipeline so we
  understand how concurrent `submitForReview()` calls should behave and what code
  changes are required before tightening the guardrail tests.
context: |
  The Sprint 21 fast guardrail now fails on `tests/registration/concurrency.test.js`
  after Mission S21.1 removed permissive execution paths. The failure surfaces when
  five concurrent `submitForReview()` calls race: the first transition moves the
  manifest into `REVIEWED`, but subsequent retries bubble `Event 'submit_for_review'
  not allowed in state 'REVIEWED'`. We need to map the current optimistic-lock retry
  algorithm (`packages/protocols/core/registration/optimistic-lock.js`) against the
  desired state machine semantics so we can decide between code changes (idempotent
  transitions, smarter retries, or state validation updates) without regressing
  downstream workflow tooling.

successCriteria:
  - "Reproduce the failing scenario deterministically and document the execution timeline."
  - "Catalogue the optimistic-lock retry paths and state machine rules that reject duplicate transitions."
  - "Produce fix options (e.g., idempotent submit, retry-on-already-applied, or state-machine change) with trade-offs for review."
  - "Provide a recommended implementation plan (tasks, affected modules, testing strategy)."

deliverables:
  - "Spike report: cmos/missions/sprint-21/S21.SP1_Registration-Optimistic-Lock-Spike.md"
  - "Captured logs/trace output for failing `tests/registration/concurrency.test.js` run."
  - "Annotated state diagram or sequence diagram describing current vs. desired transition flow."
  - "Actionable follow-up ticket(s) or mission recommendations."

domainFields:
  type: Research.Spike.v1

  researchQuestions:
    - "Why do concurrent submit-for-review attempts fail even though optimistic-lock retries are in place?"
    - "Should the registration state machine treat duplicate 'submit_for_review' events as idempotent?"
    - "What guardrails (retry counts, backoff, conflict resolution) are required to keep pipelines responsive under load?"
    - "How do proposed changes affect existing missions that rely on registration state transitions?"

  investigationScope:
    inScope:
      - "Instrumenting registration pipeline and optimistic-lock helpers."
      - "Exploring contract updates for `submitForReview`, `approve`, `reject`, `revertToDraft`."
      - "Assessing test coverage gaps that allowed the flake to surface now."
    outOfScope:
      - "Implementing the final fix (handled via follow-up mission)."
      - "Broader workflow engine rewrites or schema changes."

  validationPlan:
    - step: "Re-run failing Jest suite with additional logging and capture data."
      owner: "Spike assignee"
    - step: "Review optimistic-lock code paths with another runtime engineer."
      owner: "Runtime pairing partner"
    - step: "Summarize findings + proposals for backlog grooming."
      owner: "Spike assignee"

  handoffNotes:
    consumers:
      - "Runtime team for registration pipeline changes."
      - "CI guardrail owners to re-enable/strengthen concurrency tests."
    expectations:
      - "Spike should leave reproducible scripts/logs so implementation can start without repeating discovery."
    dependencies:
      - "Access to failing test artifacts from current CI runs."
      - "Time with domain SME familiar with optimistic-lock history (mission S18.x)."
    risks:
      - "Concurrency fixes may require schema version bumps or migration steps."
      - "Extended spike depth could delay follow-up mission if scope creeps."
