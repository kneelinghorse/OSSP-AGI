{
  "project": {
    "name": "Protocol-Driven Discovery",
    "version": "0.1.0",
    "description": "Discover and convert existing contracts (OpenAPI, Postgres, AsyncAPI) into unified protocol manifests with governance-first approach",
    "status": "active_development",
    "start_date": "2024-12-01",
    "deployment": {
      "platform": "Node.js",
      "integration_target": "CLI tool + Web viewer",
      "environment": "development"
    }
  },
    "working_memory": {
    "active_domain": "catalog_infrastructure",
    "session_count": 30,
    "last_session": "2025-10-04-week-5-planning",
    "domains": {
      "catalog_infrastructure": {
        "status": "active",
        "priority": 1,
        "current_mission": "B5.1",
        "missions": {
          "B5.1": {
            "name": "Catalog Index & Query Engine",
            "status": "in_progress",
            "started": "2025-10-04",
            "target_completion": "1-2 days"
          }
        },
        "critical_facts": [
          "URNCatalogIndex with O(1) URN lookups using Map",
          "Secondary indexes for namespace, tags, owner, PII",
          "Dependency graph with Tarjan's cycle detection",
          "Topological sort via Kahn's algorithm for build order",
          "Performance targets: <1ms URN lookup, <10ms tag queries, <50ms graph traversal",
          "Index persistence via JSON save/load",
          "Research validated: Flat hash map approach optimal for <10k artifacts"
        ],
        "constraints": [
          "Index must fit in memory (<10k artifacts)",
          "All URNs must be valid format",
          "Artifacts immutable once added",
          "Graph operations lazy (compute on demand)",
          "90%+ test coverage required"
        ],
        "decisions_made": [
          "Use Map and Set for O(1) performance (not objects/arrays)",
          "Kahn's algorithm for topological sort (handles disconnected components)",
          "Tarjan's algorithm for cycle detection with path tracking",
          "JSON Schema validation for index format",
          "Lazy graph computation to minimize memory"
        ],
        "files_to_create": [
          "src/catalog/index.ts",
          "src/catalog/query.ts",
          "src/catalog/graph.ts",
          "src/catalog/schema.ts",
          "tests/catalog/index.test.ts",
          "tests/catalog/query.test.ts",
          "tests/catalog/graph.test.ts"
        ],
        "research_completed": [
          "missions/research/SPRINT_05_RESEARCH_R5.4.md"
        ],
        "achievements": []
      },
      "asyncapi_consumer_generation": {
        "status": "complete",
        "priority": 1,
        "current_mission": null,
        "missions": {
          "B4.1": {
            "name": "AsyncAPI Importer Foundation",
            "status": "complete",
            "started": "2025-10-04",
            "completed": "2025-10-04",
            "target_completion": "2 days"
          },
          "B4.2": {
            "name": "Event-Specific Patterns",
            "status": "complete",
            "started": "2025-10-04",
            "completed": "2025-10-04",
            "target_completion": "2 days"
          },
          "B4.3": {
            "name": "Event Governance",
            "status": "complete",
            "started": "2025-10-04",
            "completed": "2025-10-04",
            "target_completion": "2 days"
          },
          "B4.4": {
            "name": "Consumer Generation",
            "status": "complete",
            "started": "2025-10-04",
            "completed": "2025-10-04",
            "target_completion": "2 days"
          }
        },
        "critical_facts": [
          "B4.1 complete: AsyncAPI 2.x/3.x importer with lazy loading",
          "B4.2 complete: Event pattern detection (DLQ/retry/ordering/fanout/evolution)",
          "B4.3 complete: Event governance sections (retention/DLQ/fanout/replay)",
          "Multi-tier binding detection achieves 95-99% reliability",
          "Three-tier PII detection: definite (95%+), potential (85-94%), contextual (70-84%)",
          "Pattern confidence scoring >80% for governance decisions",
          "Event governance leverages B4.2 patterns (pattern-driven analysis)",
          "25 governance tests added (63 total governance tests passing)",
          "B4.4 focus: TypeScript consumer generation with PII governance hooks"
        ],
        "constraints": [
          "Single consumer generation <100ms",
          "Batch 20 consumers <2s",
          "Memory usage <50MB peak",
          "Generated code must be idiomatic TypeScript",
          "PII masking must not break functionality",
          "DLQ routing only when manifest declares DLQ"
        ],
        "decisions_made": [
          "@asyncapi/parser v3.4.0 with lazy loading to avoid 2.85MB CLI penalty",
          "Multi-tier binding detection (priority cascade: 99% → 95% → 90% → 85%)",
          "Three-tier PII confidence scoring (definite/potential/contextual)",
          "Semantic URN format separates identifier from version",
          "Pattern detection integrated into importer pipeline",
          "Confidence scores reflect signal strength (not aggregation)",
          "Severity levels (error/warn/info) guide governance decisions",
          "PII + retries without DLQ = error severity (compliance risk)",
          "Pattern-driven governance (leverage B4.2 output, not re-detect)",
          "Severity-based categorization (error/warn/info sections)",
          "Retention risk tiers (critical/high/medium/low)",
          "Compliance-focused (GDPR/CCPA right to erasure)",
          "TypeScript-first consumer generation for type safety",
          "Protocol-specific client libraries (KafkaJS, amqplib, MQTT.js)",
          "Pattern-aware generation (leverage B4.2 patterns for intelligent codegen)"
        ],
        "files_to_create": [
          "app/generators/consumers/kafka-consumer-generator.js (NEW)",
          "app/generators/consumers/amqp-consumer-generator.js (NEW)",
          "app/generators/consumers/mqtt-consumer-generator.js (NEW)",
          "app/generators/consumers/test-generator.js (NEW)",
          "app/generators/consumers/utils/pii-masking-generator.js (NEW)",
          "app/generators/consumers/index.js (NEW)",
          "app/cli/commands/generate.js (NEW)",
          "app/tests/generators/kafka-consumer-generator.test.js (NEW)",
          "app/tests/generators/amqp-consumer-generator.test.js (NEW)",
          "app/tests/generators/mqtt-consumer-generator.test.js (NEW)",
          "app/tests/generators/pii-masking.test.js (NEW)",
          "app/tests/generators/test-generator.test.js (NEW)",
          "app/examples/consumer-generation-demo.js (NEW)"
        ],
        "research_completed": [
          "missions/research/SPRINT_04_RESEARCH_R4.1.md - AsyncAPI Import & Event Protocol Mapping"
        ],
        "achievements": [
          "AsyncAPI 2.x/3.x parser integrated with lazy loading",
          "Multi-tier binding detection (95-99% reliability across Kafka/AMQP/MQTT)",
          "Three-tier PII detection with confidence scoring",
          "Semantic URN generation (urn:events:{domain}:{entity}:{action})",
          "CLI integration complete (protocol-discover auto-detects AsyncAPI)",
          "Pattern detection engine (DLQ/retry/ordering/fanout/evolution) integrated",
          "20+ pattern tests added; all AsyncAPI suites passing",
          "Performance: detection <50ms/manifest; 50-channel <3.5s",
          "Event governance sections (6 sections + diagrams)",
          "PII retention analysis with compliance warnings",
          "DLQ validation from B4.2 patterns",
          "Fanout risk assessment with multiplication quantification",
          "Replay risk analysis (log compaction + PII)",
          "25 governance tests added (63 total)",
          "Retention parsing supports 7+ formats (d/h/m/s/ms/infinite)",
          "Pattern-driven governance (no re-detection, leverage B4.2)",
          "Kafka/AMQP/MQTT consumer generators with PII masking and DLQ handling",
          "Test scaffolds generated; 5 generator test suites passing",
          "CLI generate command integrated (protocol-discover generate)",
          "Batch generation performance validated (<2s for 20 consumers)"
        ]
      },
      "semantic_protocol": {
        "status": "complete",
        "priority": 1,
        "current_mission": null,
        "missions": {
          "B3.3": {
            "name": "Semantic Protocol Dogfooding",
            "status": "complete",
            "completed": "2025-10-03"
          },
          "B3.4": {
            "name": "Alt-Click Inspection UI",
            "status": "complete",
            "completed": "2025-10-04"
          }
        },
        "achievements": [
          "SemanticRegistry with debug toggle complete",
          "All viewer panels self-documented",
          "Alt-click inspection overlay at 60fps",
          "32 tests passing (activation, positioning, accessibility)"
        ]
      },
      "viewer": {
        "status": "complete",
        "priority": 1,
        "current_mission": null,
        "achievements": [
          "Express server with security middleware (29 tests)",
          "React viewer with 5 tabs and semantic coverage",
          "Alt-click inspection overlay with registry integration",
          "All performance targets met (<2s load, 60fps overlay)"
        ]
      },
      "core_protocols": {
        "status": "stable",
        "priority": 1,
        "achievements": [
          "All four protocols implemented and tested",
          "Consistent API design across protocols",
          "Working validators and generators"
        ]
      },
      "importers": {
        "status": "complete",
        "priority": 2,
        "achievements": [
          "OpenAPI importer with pattern detection",
          "Postgres importer with >90% PII accuracy",
          "AsyncAPI importer with multi-tier binding detection",
          "Performance targets met"
        ]
      },
      "graph": {
        "status": "complete",
        "achievements": [
          "Graphology-backed graph <15ms for 10k nodes",
          "Tarjan cycle detection with caching",
          "PII flow tracing with confidence"
        ]
      },
      "governance": {
        "status": "complete",
        "achievements": [
          "GOVERNANCE.md generator with Mermaid diagrams",
          "Event governance sections (B4.3)",
          "63 passing tests (38 base + 25 event)"
        ]
      },
      "validators": {
        "status": "complete",
        "achievements": [
          "Cross-protocol validators",
          "Breaking change detector",
          "45 passing tests"
        ]
      },
      "overrides": {
        "status": "complete",
        "achievements": [
          "Override system with precedence",
          "Stripe and GitHub packs",
          "54 passing tests, <5ms matching"
        ]
      },
      "seeds": {
        "status": "complete",
        "achievements": [
          "3 OpenAPI + 2 PostgreSQL seeds",
          "CLI demo commands",
          "31 passing tests"
        ]
      }
    }
  },
  "technical_context": {
    "dependencies": [
      "Node.js 18+ (required)",
      "Graphology (graph operations)",
      "PostgreSQL client libraries",
      "swagger-parser (OpenAPI)",
      "@asyncapi/parser (AsyncAPI 2.x/3.x)",
      "kafkajs (Kafka consumers)",
      "amqplib (AMQP consumers)",
      "mqtt (MQTT consumers)",
      "commander (CLI)",
      "jest/vitest (testing)",
      "express (web server)",
      "react (UI)",
      "prismjs (syntax highlighting)",
      "mermaid (diagrams)"
    ],
    "architecture": {
      "importers": "Transform external formats (OpenAPI, Postgres, AsyncAPI) to protocol manifests",
      "protocols": "Core manifest definitions (API, Data, Event, Semantic)",
      "graph": "URN-based relationship tracking",
      "governance": "GOVERNANCE.md generation (API, Data, Event sections)",
      "generators": "Consumer code generation (Kafka, AMQP, MQTT)",
      "cli": "User interface and orchestration",
      "workflow": "Draft/approve state management",
      "viewer": "Web-based exploration with semantic self-documentation"
    },
    "integration_points": [
      "OpenAPI URLs or local files",
      "PostgreSQL connection strings (read-only)",
      "AsyncAPI URLs or local files",
      "Community override repositories",
      "Express API serving manifests",
      "React SPA consuming API",
      "Generated consumer code (TypeScript)"
    ],
    "performance_targets": {
      "cli_startup": "<200ms",
      "import_operation": "<2s typical",
      "asyncapi_import": "<3s for 50-channel spec",
      "asyncapi_with_patterns": "<3.5s for 50-channel spec",
      "pattern_detection": "<50ms per manifest",
      "governance_section": "<200ms per section",
      "consumer_generation": "<100ms single, <2s for 20",
      "graph_traversal": "<10ms for 1000 nodes",
      "cycle_detection": "<100ms for 10k nodes",
      "pii_detection": "<5s for 100 tables",
      "report_generation": "<1s",
      "server_startup": "<500ms",
      "manifest_load": "<100ms",
      "page_load": "<2s",
      "tab_switch": "<50ms",
      "inspection_overlay": "60fps"
    }
  },
    "mission_planning": {
    "current_mission": {
      "id": "B5.1",
      "name": "Catalog Index & Query Engine",
      "week": 5,
      "status": "ready",
      "context_files": [
        "PROJECT_CONTEXT.json",
        "AI_HANDOFF.md",
        "missions/current.md",
        "missions/week-05/BUILD_WEEK5.md"
      ],
      "research": [
        "missions/research/SPRINT_05_RESEARCH_R5.4.md"
      ],
      "deliverables": [
        "URNCatalogIndex with O(1) lookups",
        "Secondary indexes (namespace/tags/owner/PII)",
        "Dependency graph with cycle detection",
        "Query methods and graph traversal",
        "Index persistence (save/load)"
      ]
    },
    "previous_mission": {
      "id": "B4.4",
      "name": "Consumer Generation",
      "status": "complete",
      "completed": "2025-10-04",
      "week": 4
    },
    "next_mission": {
      "id": "B5.2",
      "name": "Security Redaction Utilities",
      "status": "queued",
      "week": 5
    },
    "week_5_missions": {
      "B5.1": {
        "name": "Catalog Index & Query Engine",
        "status": "ready",
        "priority": 1,
        "days": "1-2",
        "dependencies": []
      },
      "B5.2": {
        "name": "Security Redaction Utilities",
        "status": "queued",
        "priority": 1,
        "days": "2-3",
        "dependencies": []
      },
      "B5.3": {
        "name": "Template System & Generators",
        "status": "queued",
        "priority": 1,
        "days": "3-4",
        "dependencies": []
      },
      "B5.4": {
        "name": "CLI Scaffolding Tool",
        "status": "queued",
        "priority": 2,
        "days": "4-5",
        "dependencies": ["B5.3"]
      },
      "B5.5": {
        "name": "GitHub Actions Workflow",
        "status": "queued",
        "priority": 3,
        "days": "5-6",
        "dependencies": ["B5.1", "B5.2"]
      },
      "B5.6": {
        "name": "PR Automation & Governance Reporting",
        "status": "queued",
        "priority": 4,
        "days": "6-7",
        "dependencies": ["B5.5"]
      },
      "B5.7": {
        "name": "npm Package Configuration & Distribution",
        "status": "queued",
        "priority": 5,
        "days": "7-8",
        "dependencies": ["B5.4"]
      }
    },
    "week_4_missions": {
      "B4.1": {
        "name": "AsyncAPI Importer Foundation",
        "status": "complete",
        "priority": 1,
        "days": "1-2",
        "completed": "2025-10-04"
      },
      "B4.2": {
        "name": "Event-Specific Patterns",
        "status": "complete",
        "priority": 2,
        "days": "2-3",
        "completed": "2025-10-04"
      },
      "B4.3": {
        "name": "Event Governance",
        "status": "complete",
        "priority": 3,
        "days": "3-4",
        "completed": "2025-10-04"
      },
      "B4.4": {
        "name": "Consumer Generation",
        "status": "complete",
        "priority": 4,
        "days": "4-5",
        "started": "2025-10-04",
        "completed": "2025-10-04"
      }
    }
  },
  "context_health": {
    "size_kb": 72,
    "size_limit_kb": 100,
    "sessions_since_reset": 11,
    "last_reset": "2024-12-01",
    "compression_enabled": true,
    "anti_pattern_detection": true
  },
  "ai_instructions": {
    "preferred_language": "javascript",
    "code_style": "functional_minimal_dependencies",
    "testing_required": true,
    "documentation_level": "inline_jsdoc",
    "build_location": "/app",
    "special_instructions": [
      "All build artifacts go under /app directory",
      "Maintain zero dependencies in core protocols",
      "Use URN format: urn:proto:<kind>:<authority>/<id>[@<version>]",
      "Always validate manifests before operations",
      "Include confidence scores for heuristics",
      "Update all documentation when mission completes",
      "Use Graphology for all graph operations",
      "CRITICAL: Lazy load @asyncapi/parser (2.85MB) - import only when needed",
      "Multi-tier binding detection (priority cascade, not aggregation)",
      "Three-tier PII confidence scoring (definite/potential/contextual)",
      "Semantic URN format separates identifier from version",
      "API routes before static middleware in Express",
      "RAF and debounce for 60fps UI updates",
      "Pattern detection: confidence reflects signal strength, not aggregation",
      "PII + retries without DLQ = error severity (compliance risk)",
      "Pattern-driven governance: leverage B4.2 patterns, no re-detection",
      "Generated code must be idiomatic TypeScript",
      "PII masking in generated consumers for safe logging",
      "DLQ routing only when manifest declares DLQ",
      "Protocol-specific client libraries: KafkaJS, amqplib, MQTT.js"
    ]
  },
  "current_sprint": {
    "week": 5,
    "phase": "Week 5: Production Polish",
    "active_mission": "B5.1: Catalog Index & Query Engine",
    "completed_missions": [
      "B1.1: OpenAPI Importer",
      "B1.2: Postgres Importer",
      "B1.3: CLI Framework",
      "B1.4: Draft/Approve Workflow",
      "B1.5: End-to-End Testing",
      "B2.1: ProtocolGraph",
      "B2.2: Validators & Diff Engine",
      "B2.3: Community Overrides",
      "B2.4: GOVERNANCE.md Generator",
      "B2.5: Curated Seeds",
      "B3.1: Express Server",
      "B3.2: React Viewer",
      "B3.3: Semantic Dogfooding",
      "B3.4: Alt-Click Inspection",
      "B4.1: AsyncAPI Importer Foundation",
      "B4.2: Event-Specific Patterns",
      "B4.3: Event Governance",
      "B4.4: Consumer Generation"
    ],
    "queued_missions": [
      "B5.2: Security Redaction Utilities",
      "B5.3: Template System & Generators",
      "B5.4: CLI Scaffolding Tool",
      "B5.5: GitHub Actions Workflow",
      "B5.6: PR Automation & Governance Reporting",
      "B5.7: npm Package Configuration & Distribution"
    ],
    "blockers": [],
    "next_milestone": "Week 6: Future Enhancements",
    "week_3_summary": {
      "total_files_created": 15,
      "total_tests": 61,
      "test_coverage": "Server (29) + Client (32) tests",
      "performance_targets_met": true,
      "key_achievements": [
        "Express server with security middleware",
        "React viewer with 5-tab interface",
        "Semantic protocol dogfooding across all panels",
        "Alt-click inspection overlay at 60fps",
        "All performance targets met (<2s load, 60fps)"
      ]
    },
    "week_4_b4_1_summary": {
      "total_files_created": 14,
      "total_tests": 42,
      "tests_passing": 35,
      "pass_rate": "83%",
      "performance_achieved": {
        "parse_time": "620ms (target <750ms)",
        "binding_detection": "35ms",
        "pii_detection": "1.2s (20 fields)",
        "urn_generation": "4ms",
        "total_pipeline": "2.8s (target <3s)"
      },
      "key_achievements": [
        "AsyncAPI 2.x/3.x parser with lazy loading",
        "Multi-tier binding detection (95-99% reliability)",
        "Three-tier PII confidence scoring",
        "Semantic URN generation with separate version",
        "CLI integration complete"
      ]
    },
    "week_4_b4_3_summary": {
      "total_files_created": 4,
      "total_tests": 25,
      "tests_passing": 63,
      "governance_tests": "63 total (38 base + 25 event)",
      "performance_achieved": {
        "section_generation": "<200ms per section",
        "diagram_generation": "<25ms",
        "total_tests": "<600ms"
      },
      "key_achievements": [
        "Event delivery overview generation",
        "PII retention analysis with compliance warnings",
        "DLQ validation from B4.2 patterns",
        "Fanout risk assessment with multiplication quantification",
        "Replay risk analysis (log compaction + PII)",
        "Event flow Mermaid diagrams",
        "Pattern-driven governance (leverage B4.2)",
        "Retention parsing (7+ formats)"
      ]
    },
    "week_4_summary": {
      "total_files_created": 32,
      "total_tests": "468+ tests",
      "test_coverage": "All 4 missions complete with comprehensive test coverage",
      "performance_targets_met": true,
      "key_achievements": [
        "AsyncAPI 2.x/3.x importer with lazy loading (<3.5s for 50-channel specs)",
        "Multi-tier binding detection (95-99% reliability across Kafka/AMQP/MQTT)",
        "Event pattern detection engine (DLQ/retry/ordering/fanout/evolution)",
        "Event governance sections with compliance warnings (GDPR/CCPA)",
        "Consumer code generation (Kafka/AMQP/MQTT) with PII masking",
        "CLI generate command integrated",
        "63 governance tests passing (38 base + 25 event)",
        "All performance targets met (<100ms single consumer, <2s batch)"
      ]
    }
  }
}
